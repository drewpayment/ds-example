export interface ClockClientRulesSummary {
    weeklyStartingDayOfWeekId?: number; // byte;
    defaultCalendarView?: number; // byte;
    splitHolidayAmongShifts: string;
    showSubcheckOnBenefitScreen: string;

    clockClientRulesId: number;  // int; //start ClockClientRuleMemebers
    name: string;
    clientId?: number;  // int;
    biWeeklyStartingDayOfWeekId?: number; // byte;
    semiMonthlyStartingDayOfWeekId?: number; // byte;
    monthlyStartingDayOfWeekId?: number; // byte;
    startTime?: any; // string; // DateTime;
    stopTime?: any; // string; // DateTime;
    inEarlyClockRoundingTypeId?: number; // byte;
    outEarlyClockRoundingTypeId?: number; // byte;
    inLateClockRoundingTypeId?: number; // byte;
    outLateClockRoundingTypeId?: number; // byte;
    clockTimeFormatId?: number; // byte;
    modifiedBy?: number;  // int;
    modified?: any; // string; // DateTime;
    inEarlyGraceTime: number; // short;
    outEarlyGraceTime: number; // short;
    inLateGraceTime: number; // short;
    outLateGraceTime: number; // short;
    shiftInterval?: number; // decimal;
    maxShift?: number; // decimal;
    punchOption?: any; // PunchOptionType;
    hideCostCenter: boolean;
    hideDepartment: boolean;
    hidePunchType: boolean;
    inEarlyAllowPunchTime: number; // byte;
    outEarlyAllowPunchTime: number; // byte;
    inLateAllowPunchTime: number; // byte;
    outLateAllowPunchTime: number; // byte;
    allPunchesClockRoundingTypeId?: number; // byte;
    allPunchesGraceTime: number; // short;
    editPunches: boolean;
    importPunches: boolean;
    importBenefits: boolean;
    applyHoursOption?: number; // byte;
    clockAllocateHoursFrequencyId?: number; // byte;
    clockAllocateHoursOptionId?: number; // byte;
    editBenefits: boolean;
    hideMultipleSchedules: boolean;
    hideJobCosting: boolean;
    hideEmployeeNotes: boolean;
    ipLockout: boolean;
    allowMobilePunch: boolean;
    hideShift: boolean; // END ClockClientRules

    clockClientTimePolicyId?: number;  // int;
    clockClientExceptionId?: number;  // int;
    clockClientLunchId?: number;  // int;
    inEarlyMinutes?: number; // double;
    inLateMinutes?: number; // double;
    outEarlyMinutes?: number; // double;
    outLateMinutes?: number; // double;
    allPunchesMinutes?: number; // double;
    inEarlyRoundDirection?: number; // byte;
    inLateRoundDirection?: number; // byte;
    outEarlyRoundDirection?: number; // byte;
    outLateRoundDirection?: number; // byte;
    allPunchesRoundDirection?: number; // byte;
    employeeId?: number;  // int;
    clientCostCenterId?: number;  // int;
    clientDepartmentId?: number;  // int;
    holidayWorkedClientEarningId?: number;  // int;
    includeInOvertimeCalcs: boolean;
    numberOfDaysToShow?: number;  // int;
    shiftOptions?: number; // byte;
    includeShifts: string;
    blockSupervisorAuthorization: string;
    showRateOverrideOnBenefitScreen: string;
    isCostCenterRequired: number;  // int;
    noPunchesOnScheduledDayException: number;  // int;
    timeZoneId?: number;  // int;
    noPunchesBeforeHoliday: number;  // int;
    noPunchesAfterHoliday: number;  // int;
    noPunchesOnScheduledDayBeforeHoliday: number;  // int;
    noPunchesOnScheduledDayAfterHoliday: number;  // int;
    punchesOnBenefitDay: number;  // int;
    showHoursInHundreths: string;
    showClockDropDownList: string;
    clientShiftId: number;  // int;
    holidayClientEarningId: number;  // int;
    addToOtherPolicy: boolean;
    allowInputPunches: boolean;
}
